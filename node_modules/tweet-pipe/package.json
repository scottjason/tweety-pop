{
  "name": "tweet-pipe",
  "version": "1.0.0",
  "description": "parse twitter's streaming api with nodejs streams",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/peeinears/tweet-pipe.git"
  },
  "dependencies": {
    "event-stream": "3.0.2",
    "request": "2.10.0"
  },
  "keywords": [
    "tweet",
    "stream",
    "twitter",
    "streaming",
    "api",
    "pipe"
  ],
  "engines": {
    "node": "*"
  },
  "author": {
    "name": "Ian Pearce",
    "email": "ian@ianpearce.org"
  },
  "license": "MIT",
  "readme": "TweetPipe\n==========\n\nConnect to Twitter's Streaming API via Node.js Streams (using EventStreams)\nhttps://github.com/peeinears/tweet-pipe\n\n## :)\n\n - Uses [Node Streams](http://nodejs.org/api/stream.html)\n - With the help of [EventStream](https://github.com/dominictarr/event-stream)\n - and [Request](https://github.com/mikeal/request) (which also uses EventStream)\n - This means you can `pipe()` stuff around, which is really great\n - Can pull down and deflate gzipped data (and does so by default)\n - Inspiration (and some borrowed logic) from [ntwitter](https://github.com/AvianFlu/ntwitter)\n\n## :(\n\n - No tests\n - Site streams currently unsupported\n - Lacking in error handling\n\n## Put some tweets in your pipe and do stuff with them\n\n### Basic usage\n\n#### Setup\n\n``` js\nvar TweetPipe = require('tweet-pipe');\n\nvar tp = new TweetPipe({\n  consumer_key: 'yourconsumerkey',\n  consumer_secret: 'yourconsumersecret',\n  token: 'youraccesstoken',\n  token_secret: 'youraccesstokensecret'\n});\n```\n\n#### Streamin'\n\ntp.stream(method [, params] [, data_events] [, callback(stream)])\n\n``` js\ntp.stream('statuses/sample'); // returns a Stream that emits tweet JSON\n```\n\nThat won't really do anything, but from there you can pipe the tweets into other streams that do stuff:\n\n``` js\ntp.stream('statuses/sample')\n  .pipe(tp.stringify())\n  .pipe(process.stdout);\n```\n\n#### With params\n\n``` js\nvar params = {\n  'track': ['ball', 'rim', 'john'],\n  'locations': ['-122.75,36.8,-121.75,37.8', '-74,40,-73,41'], // SF and NY\n  'follow': ['justinbieber', 'nodejs']\n};\ntp.stream('statuses/filter', params); // will emit tweets that match any one of the params\n```\n\n[All parameters](https://dev.twitter.com/docs/streaming-apis/parameters)\n\n#### With a callback\n\n``` js\ntp.stream('statuses/sample', function (stream) {\n  // hook to emitted events and do stuff\n  stream.on('tweet', function (tweet) {\n    // do stuff with tweet\n  });\n});\n```\n\n#### Change what gets emitted as `'data'`\n\nBy default, `tp.stream()` will only pipe out tweets (as JSON). \nYou can change this so that other message types are emitted as `'data'`.\n\n``` js\n// pipe out 'delete' and 'scrub_geo' messages as well\ntp.stream('statuses/sample', ['tweet', 'delete', 'scrub_geo']);\n\n// pipe out all message types\ntp.stream('statuses/sample', ['all']);\n\n// don't pipe anything out\ntp.stream('statuses/sample', false);\n\n// pipe out only tweet text\ntp.stream('statuses/sample', false, function (stream) {\n  stream.on('tweet', function (tweet) {\n    stream.emit('data', tweet.text);\n  });\n});\n```\n\n### Supported events\n\nRefer to: https://dev.twitter.com/docs/streaming-apis/messages\n\n`'tweet'`, `'delete'`, `'limit'`, `'scrub_geo'`, `'status_withheld'`, `'user_withheld'`, `'friends'`, `'event'`\n\n`'all'` emits data chunks of all types\n\n\n### Raw streams and convenience methods\n\nYou can also access the raw, [un-deflated,] unparsed stream with `tp.raw_stream(method, params, callback)`. \nNote that the callback here is on the `Request` object -- the above events are not emitted.\n\nIf you're piping this stream elsewhere you can use \n`tp.unzip()` to deflate gzipped streams and \n`tp.parse()` to convert the stream into JSON.\n`tp.stringify()` is also available and can be useful with `tp.stream()`.\n\n``` js\ntp.raw_stream('statuses/sample')\n  .pipe(tp.unzip())\n  .pipe(tp.parse()) // to JSON\n  .pipe(tp.stringify()); // woo, back to a string!\n```\n\n### Example\n\nTrack the popularity of various Mexican cuisine for one minute:\n\n``` js\n\nvar TweetPipe = require('tweet-pipe');\n\nvar oauth = {\n  consumer_key: 'yourconsumerkey',\n  consumer_secret: 'yourconsumersecret',\n  token: 'youraccesstoken',\n  token_secret: 'youraccesstokensecret'\n};\n\nvar tp = new TweetPipe(oauth);\n\nvar tacos = burritos = enchiladas = 0;\n\nvar params = { track: ['taco', 'burrito', 'enchilada'] };\ntp.stream('statuses/filter', params, function (stream) {\n\n  stream.on('tweet', function (tweet) {\n    if (tweet.text.search(/\\btacos?\\b/i) >= 0) tacos++;\n    if (tweet.text.search(/\\bburritos?\\b/i) >= 0) burritos++;\n    if (tweet.text.search(/\\benchiladas?\\b/i) >= 0) enchiladas++;\n\n    // choose what gets piped to next stream (if anything)\n    // in this case, pipe out tweet text\n    stream.emit('data', tweet.text + '\\n');\n  });\n\n  stream.on('error', function (error) {\n    console.log('Uh oh: ' + error);\n  });\n\n  stream.on('end', function () {\n    console.log(\"\\n\");\n    console.log(\"THE RESULTS\");\n    console.log(\"===========\");\n    console.log('Tacos: ' + tacos);\n    console.log('Burritos: ' + burritos);\n    console.log('Enchiladas: ' + enchiladas);\n  });\n\n  // stop the stream after 60 seconds\n  setTimeout(function () { stream.end(); }, 60*1000);\n}).pipe(process.stdout); // tweet text piped to stdout\n\n```\n\n## License\n\nMIT\n",
  "_id": "tweet-pipe@1.0.0",
  "dist": {
    "shasum": "b73ea96d67c80894a461754e3646de67ab4d1efa",
    "tarball": "http://registry.npmjs.org/tweet-pipe/-/tweet-pipe-1.0.0.tgz"
  },
  "_npmVersion": "1.1.49",
  "_npmUser": {
    "name": "peeinears",
    "email": "ian@ianpearce.org"
  },
  "maintainers": [
    {
      "name": "peeinears",
      "email": "ian@ianpearce.org"
    }
  ],
  "directories": {},
  "_shasum": "b73ea96d67c80894a461754e3646de67ab4d1efa",
  "_from": "tweet-pipe@*",
  "_resolved": "https://registry.npmjs.org/tweet-pipe/-/tweet-pipe-1.0.0.tgz"
}
